/* File:		TaskWrapper.h Description: 	This class is a generalized process handling class that makes asynchronous interaction with an NSTask easier.  There is also a protocol designed to work in conjunction with the TaskWrapper class; your process controller should conform to this protocol.  TaskWrapper objects are one-shot (since NSTask is one-shot); if you need to run a task more than once, destroy/create new TaskWrapper objects.*/#import <Foundation/Foundation.h>@protocol TaskWrapperController// Your controller's implementation of this method will be called when output arrives from the NSTask.// Output will come from both stdout and stderr, per the TaskWrapper implementation.- (void)appendOutput:(NSString *)output;// This method is a callback which your controller can use to do other initialization when a process// is launched.- (void)processStarted;// This method is a callback which your controller can use to do other cleanup when a process// is halted.- (void)processFinished;@end@interface TaskWrapper : NSObject {    NSTask				*task;	NSStringEncoding	currentEncoding;	NSString			*taskLaunchPath;    id					<TaskWrapperController>controller;    NSArray				*arguments;	BOOL				useStdOut;	NSFileHandle		*reading;}- (id)initWithController:(id <TaskWrapperController>)cont					with:(NSString *)launchPath 				 options:(NSMutableArray*)cmdlineOptions 				encoding:(NSStringEncoding)anEncoding 			   useStdout:(BOOL)useout;// This method launches the process, setting up asynchronous feedback notifications.- (void) startProcess:(NSString*)textInput;// This method stops the process, stoping asynchronous feedback notifications.- (void) stopProcess;@end